#!/bin/bash
set -eu -o pipefail
safe_source () { [[ ! -z ${1:-} ]] && source $1; _dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; _sdir=$(dirname "$(readlink -f "$0")"); }; safe_source
# end of bash boilerplate

safe_source $_sdir/lib/all.sh

show_help(){
    local script=$(basename $0)
    local reason=${1:-}
    [[ ! -z $reason ]] && cat <<REASON
    -------------------------------
    ERROR: $reason
    -------------------------------
REASON
    cat <<HELP

    $script [options] /path/to/source /path/to/destination

    Options:

        --dry-run       : Dry run, don't touch anything actually

HELP
    exit
}

# for debugging
#set -x

# Parse command line arguments
# ---------------------------
# Initialize parameters
dry_run=false
# ---------------------------
args=("$@")
_count=1
while :; do
    key="${1:-}"
    case $key in
        -h|-\?|--help|'')
            show_help    # Display a usage synopsis.
            exit
            ;;
        # --------------------------------------------------------
        --dry-run) shift
            dry_run=true
            ;;
        # --------------------------------------------------------
        -*)
            echo
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)  # generate the positional arguments: $_arg1, $_arg2, ...
            [[ ! -z ${1:-} ]] && declare _arg$((_count++))="$1" && shift
    esac
    [[ -z ${1:-} ]] && break
done; set -- "${args[@]}"
# use $_arg1 in place of $1, $_arg2 in place of $2 and so on, "$@" is intact

s=${_arg1:-}
d=${_arg2:-}

[[ -z $s ]] && show_help "Source can not be empty"
[[ -z $d ]] && show_help "Destination can not be empty"


[[ $(whoami) = "root" ]] || { sudo $0 "$@"; exit 0; }

[[ $dry_run = true ]] && dry_run_str="(dry run)"
echo "=====================${dry_run_str:-}=========================="
echo "from $s to $d "
echo
echo "Following snapshot roots will be synced:"
for _snap_root in $(get_snapshot_roots $s); do
    echo "* $_snap_root"
done
echo "==============================================="
echo

# Fixme: Following command takes too long
#start=$SECONDS
#for i in 1; do
#    echo "pass $i"
#    find_sent_subs $s $d > x2
#done
#echo "took: $(( $SECONDS - $start ))"

# source and destination should be on different disks
require_different_disks $s $d

src_mnt=$(mount_point_of $s)
dst_mnt=$(mount_point_of $d)

for _snap_root in $(get_snapshot_roots $s); do
    snap_root=${_snap_root#$src_mnt/}
    echo_blue "Syncing $snap_root -> $dst_mnt/..."

    # create target directory structure
    mkdir -p "$dst_mnt/$snap_root"

    echo "--- already sent: ---"
    find_sent_subs "$src_mnt/$snap_root" "$dst_mnt/$snap_root"

    echo "--- incomplete transfers ---"
    for incomplete in `list_subvol_below $dst_mnt/$snap_root true`; do
        if is_subvolume_incomplete $incomplete; then
            echo_yellow "Found incomplete snapshot: $incomplete"
            if [[ $dry_run = false ]]; then
                btrfs sub del $incomplete
            else
                echo "(This is dry run, won't delete anything actually)"
            fi
        fi
    done

    echo "--- missing: ---"
    snapshots=$(list_subvol_below $src_mnt/$snap_root)
    for missing in `find_missing_subs "$src_mnt/$snap_root" "$dst_mnt/$snap_root"`; do
        parent=$(find_prev_snap $missing $snapshots)
        if [[ -z $parent ]]; then
            echo_yellow "No parent found for $missing, sending whole snapshot"
            _parent_arg=
        else
            echo_blue "Sending $(basename $missing) (based on $(basename $parent)) "
            _parent_arg="-p $parent"
        fi

        if [[ $dry_run = true ]]; then
            echo "(This is dry run, won't send anything actually.)"
        else
            btrfs send -q $_parent_arg $missing | pv | btrfs receive $dst_mnt/$snap_root/ > /dev/null
            echo_green "...$missing succesfully sent."
        fi
    done
    echo "end of syncing $snap_root"
done

echo_green "done."
